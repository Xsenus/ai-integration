# app/api/ai_analyzer.py
from __future__ import annotations

import logging
from typing import Optional

from fastapi import APIRouter, HTTPException, status

from app.schemas.ai_analyzer import (
    AiAnalyzerRequest,
    AiAnalyzerResponse,
    CompanyBlock,
    AiBlock,
    AiProduct,
    AiEquipment,
)

# –ï—Å–ª–∏ —Ä–µ—à–∏—à—å –≤—ã–Ω–µ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É ‚Äî –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –∏–∑ app.services.ai_analyzer
# from app.services.ai_analyzer import analyze_company_by_inn

log = logging.getLogger("api.ai_analyzer")
router = APIRouter(prefix="/v1/lookup", tags=["ai-analyzer"])


def _canonical_response(
    inn: str,
    *,
    domain1: Optional[str] = None,
    domain2: Optional[str] = None,
    industry: Optional[str] = None,
    sites: Optional[list[str]] = None,
    products: Optional[list[AiProduct]] = None,
    equipment: Optional[list[AiEquipment]] = None,
    utp: Optional[str] = None,
    letter: Optional[str] = None,
    note: Optional[str] = None,
) -> AiAnalyzerResponse:
    """–°–æ–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    sites = sites or [d for d in (domain1, domain2) if d]
    company = CompanyBlock(domain1=domain1, domain2=domain2)
    ai = AiBlock(
        industry=industry,
        sites=sites,
        products=products or [],
        equipment=equipment or [],
        utp=utp,
        letter=letter,
    )
    return AiAnalyzerResponse(ok=True, inn=inn, company=company, ai=ai, note=note)


@router.post(
    "/ai-analyzer",
    response_model=AiAnalyzerResponse,
    summary="AI-–∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù (POST)",
)
async def post_ai_analyzer(payload: AiAnalyzerRequest) -> AiAnalyzerResponse:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON –≤–∏–¥–∞:
    `{ "inn": "2455024746" }`

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç, –ø—Ä–∏–≥–æ–¥–Ω—ã–π –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ.
    """
    inn = payload.inn

    # TODO: –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É:
    # result = await analyze_company_by_inn(inn)
    # return _canonical_response(**result)

    # –í—Ä–µ–º–µ–Ω–Ω—ã–π ¬´–ø—É—Å—Ç–æ–π, –Ω–æ –≤–∞–ª–∏–¥–Ω—ã–π¬ª –æ—Ç–≤–µ—Ç (—á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç —Å—Ä–∞–∑—É –º–æ–≥ –º–∞–ø–∏—Ç—å –¥–∞–Ω–Ω—ã–µ):
    return _canonical_response(
        inn,
        note="stub: –ø–æ–¥–∫–ª—é—á–∏—Ç–µ app.services.ai_analyzer.analyze_company_by_inn",
    )


@router.get(
    "/{inn}/ai-analyzer",
    response_model=AiAnalyzerResponse,
    summary="AI-–∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù (GET)",
)
async def get_ai_analyzer(inn: str) -> AiAnalyzerResponse:
    """
    –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–π –ø–æ –æ—Ç–≤–µ—Ç—É —ç–Ω–¥–ø–æ–∏–Ω—Ç GET /v1/lookup/{inn}/ai-analyzer.

    > –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò–ù–ù –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è —Å—Ö–µ–º–∞—Ç–∏—á–Ω–æ ‚Äî 10/12 —Ü–∏—Ñ—Ä.
    """
    if not inn.isdigit() or len(inn) not in (10, 12):
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail="–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä",
        )

    # TODO: –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É:
    # result = await analyze_company_by_inn(inn)
    # return _canonical_response(**result)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç —É–≤–∏–¥–µ–ª –ø–æ–ª–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥:
    example_products = [
        AiProduct(
            name="—á—ë—Ä–Ω—ã–π —Ö–ª–µ–±",
            goods_group="–ì—Ä—É–ø–ø–∞ 19",
            domain="example.com",
            url="https://example.com/bread",
        ),
        AiProduct(
            name="–≤–∞—Ñ–µ–ª—å–Ω—ã–µ —Ç–æ—Ä—Ç—ã",
            goods_group="–ì—Ä—É–ø–ø–∞ 19",
            domain="example.com",
            url="https://example.com/waffle",
        ),
    ]
    example_equipment = [
        AiEquipment(
            name="–¢–µ—Å—Ç–æ–º–µ—Å—ã/—Å–º–µ—Å–∏—Ç–µ–ª–∏",
            equip_group="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–∏—â–µ–≤–æ–µ",
            domain="example.com",
            url="https://example.com/mixers",
        ),
        AiEquipment(
            name="–£–ø–∞–∫–æ–≤–æ—á–Ω—ã–µ –º–∞—à–∏–Ω—ã",
            equip_group="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É–ø–∞–∫–æ–≤–æ—á–Ω–æ–µ",
            domain="example.com",
            url="https://example.com/pack",
        ),
    ]

    return _canonical_response(
        inn=inn,
        domain1="https://example.com",
        domain2="https://shop.example.com",
        industry="–ü–∏—â–µ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å / —Ö–ª–µ–±–æ–ø–µ—á–µ–Ω–∏–µ",
        sites=["https://example.com", "https://shop.example.com"],
        products=example_products,
        equipment=example_equipment,
        utp="üçû –û—Ç –ø–µ—á–∏ –¥–æ –ø–æ–ª–∫–∏: —Å–≤–µ–∂–µ—Å—Ç—å, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±—ã—Å—Ç—Ä–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞.",
        letter="–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏,\n–ò–∑—É—á–∏–ª–∏ –≤–∞—à —Å–∞–π—Ç. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º...\n‚Äî –ü—É–Ω–∫—Ç 1\n‚Äî –ü—É–Ω–∫—Ç 2\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ò–†–ë–ò–°",
        note="example payload",
    )
